import { Component } from '@angular/core';
import { NavController, NavParams } from 'ionic-angular';
import{KonujsPage} from '../konujs/konujs'

/**
 * Generated class for the JslistePage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@Component({
  selector: 'page-jsliste',
  templateUrl: 'jsliste.html',
})
export class JslistePage {
   public items:any;
   baslik4:string;
   jsicerik:string;
  constructor(public navCtrl: NavController, public navParams: NavParams) {
    this.items=[
       {
         "baslik4":"JS Nedir ?",
         "jsicerik":"JavaScript, Html ve Css gibi istemci tarafında çalışan bir programlama dilidir.Yani javascript komutları, sunucuya\ngönderilme ihtiyacı olmadan, direk olarak istemcinin bilgisayarında çalıştırılır ve sonuç kullanıcıya gösterilir.JavaScript C dilinden türemiş olup, Java programlama dili ile hiç bir ilgisi yoktur.JavaScript Yazım Kuralları Html ile iç içe kullanılan javascript komutları, script etiketleri arasında yer alır.<script language=”JavaScript”> Komutlar….</script>Language parametresi yerine type='text/javascript' parametresi de kullanılabilir veya hiç parametre kullanılmayabilir.\nBu script kısmı head ya da body etiketleri arasında oluşturulabilir. Her durumda sayfa yüklendiğinde script etiketleri arasındaki komutlar çalıştırılacak ve sonuç gösterilecektir.Fakat bir javascript fonksiyonu (metodu) oluşturulacaksa daha çok head kısmına yazmak tercih edilir. Fonksiyonlar sayfa yüklenirken değil, ilgili eleman tarafından çağırıldıklarında çalışır ve içerdikleri komutları yerine getirirler.\n JavaScript büyük küçük harfe duyarlı bir dildir.",
          "component":KonujsPage
       },
       {
        "baslik4":"JS Temel Bilgiler",
        "jsicerik":"Değişken Tanımlama \n Değişkenler, programın çalışması esnasında oluşturulan ve verileri saklamaya yarayan elemanlardır. Değişkenler oluşturulurken isimleri ve saklayacakları verinin türü belirlenir. Değişkene değer verileceği zaman, ya da değişkenin sakladığı değere ulaşılmak istendiğinde bu isim kullanılacaktır.\nJavaScript'in diğer dillerden farkı değişkenin, tür belirtmeden de tanımlanabilmesidir. Var komutu ile değişkenin sadece ismi belirtilerek değişken oluşturulabilir. Ardından bu değişkene istenen türde veri girilebilir. Girilen değere göre değişkenin türü algılanacaktır.\nNot: String türündeki değişkenlere değer atarken tek tırnak veya çift tırnak kullanabiliriz.\nVeri Türleri\n JavaScript dilinde değişkenler için 3 farklı veri türünden bahsedebiliriz: \nNumber: Her türlü sayısal değeri saklamak için kullanılır. Ondalıklı sayılarda ondalık kısmı ayırmak için nokta kullanılır.\nString: Karakter veya metin saklamak için kullanılır.\nBoolean: True ya da false değeri saklayabilirler.\nÖrnekler:\nvar sayi1; sayi1=100; var isim='Zafer'; \n Not: JavaScript değişkenlerin türlerini girilen veriye göre kendisi algılamaktadır. Örneğin bir değişkene sayısal bir değer atandığında o değişken Number türüne geçer. Aynı değişkene daha sonra metin değeri verilirse o değişken otomatikman string türüne çevrilir. Bizim bir dönüşüm yapmamıza gerek kalmaz.Örneğin;\nvar a=50;a='Ahmet';\nDeğişken İsimlendirme KurallarıJavaScript büyük küçük harfe duyarlı bir dildir.\nDeğişkenlere isim verilirken Türkçe karakterler ( ı, İ, ğ, Ğ, ü, Ü, ş, Ş, ö, Ö, ç, Ç ), boşluk ve özel karakterler ( . , ; : / vb. ) kullanılmamalıdır.\nAyrıca programlama dilinde başka bir anlamı olan kelimeler de, değişken ismi olarak seçilmemelidir. (int, not, if, char vb.) \n Değişken isimleri rakam veya sayı ile başlayamaz. \nBir değişkene not1 ismi verilebilir ancak 1not ismi verilemez.\n Değişkenler arasında matematiksel işlemler\nString türünde iki değişken toplanırsa, iki değişkenin değerleri yan yana birleştirilir.var x = 'bilgisayar' + 'dersi';  sonuç bilgisayar dersi \nNumber türündeki değişkenler arasında her türlü matematiksel işlem gerçekleştirilebilir.\n Bir string ile bir number türündeki değişken toplandığında ise soldan sağa doğru işlemler gerçekleştirilir. Bunu farklı örnekler ile açıklayalım:\nvar x = 'bilgisayar' + 15;  sonuç bilgisayar15 \nvar x = 15 + 'bilgisayar';  sonuç 15bilgisayar\nvar x = 15 + 'bilgisayar' + 15;  sonuç 15bilgisayar15\n var x = 15 + 5 + 'bilgisayar' + 15;  sonuç 20bilgisayar15 \n parseInt() Metodu \n JavaScript ile iki sayıyı toplamaya çalıştığımızda, bazı durumlarda, özellikle sayıları sayfamızdaki form elemanlarından elde ettiysek bir sorun ile karşılaşabiliriz.\n var a=parseInt(document.getElementById('kutu1').value);",        
        component:KonujsPage
       },
       {
        "baslik4":"JS For,While,İf-else kullanımı",
        "jsicerik":"For Döngüsü\n Belirtilen işlemlerin, istenen şart sağlandığı sürece tekrar edilmesini sağlar. Başlangıç değerinin ve koşulun belirtilebilmesi amacıyla bir değişken kullanılır. Aşağıdaki örnekte 'i' isimli bir değişken kullanılmıştır.\nDöngü for ifadesi ile başlar ve parantez içi birbirinden noktalı virgül ile ayrılan üç kısımdan oluşur:\n i=1 ile değişkenin başlangıç değeri belirtilmiştir.\n i<=100 ile döngünün devam etmesi için sağlanması gereken koşul belirtilmiştir. Bu örnekte i değişkeninin değeri 100'den küçük veya eşit olduğu sürece döngü tekrarlanacaktır.\n i++ ile de döngü her döndüğünde i değişkeninin değerinin 1 artırılması sağlanmıştır.for(i=1;i<=100;i++){calisacak komutlar..}if - else Kullanımı\n if (şartımız){Şart doğruysa yapılacak işlemler}else{Şart yanlışsa yapılacak işlemler}\nAçıklama: if komutundan sonra parantez içerisinde şart yazılır.\nİlk süslü parantezler arasına, şart doğru ise yapılacak işlemler yazılır.\nElse kısmı isteğe bağlıdır. Şart yanlış ise yapılacak işlemler, else komutundan sonraki parantezler arasına yazılır.\nNot: Şart doğru ya da yanlış olduğunda yapılacak işlemler 1 satırdan oluşuyorsa küme parantezleri kullanılmayabilir. Programımızda kontrol etmemiz gereken durumların sayısı 2 ve daha fazla ise else if kullanarak, her durumda yapılacakları ayrı ayrı belirtebiliriz.Örnek:if(a<b){document.write('a sayısı küçük');}else if(b<a){ document.write('b sayısı küçük');  }else{document.write('sayılar eşit');} Burada da else kısmı isteğe bağlıdır ve hiç bir şartın tutmadığı durumda buradaki işlemler yapılır.While Döngüsü\nBelirtilen şart sağlandığı sürece istenilen işlemlerin tekrarlanmasını sağlar. \nFor döngüsü kullanırken, döngünün kaç kez döneceği baştan bilinmekte, en azından tahmin edilebilmektedir. \nWhile döngüsü ise döngünün kaç kez döneceğinin bilinmediği durumlarda tercih edilir. En başta belirtilen şart tutmaz ise döngü hiç dönmeyebilir, tutması halindeyse defalarca dönebilir.\nvar sayi=1;\nwhile(sayi!=0){sayi=prompt('Sayı giriniz');document.write(sayi+'<br/>'); }document.write('Bitti');",
        component:KonujsPage
       },
       {
        baslik4:'JS Diziler Ve Mat. Fonksiyon',
        jsicerik:" Diziler birden fazla veriyi saklayabilen değişkenler olarak düşünülebilirler.Programlama dillerinin çoğunda dizi tanımlanırken hangi türde veri saklayacağı ve kaç elemanlı olacağı belirtilmektedir. JavaScript ise bu konuda da esnek bir dildir. JavaScript ile bir dizi oluştururken veri türü ve eleman sayısı belirtilmez. Ayrıca JavaScript'te oluşturulan bir dizi farklı türdeki verileri bir arada saklayabilir.Ayrıca dizideki her elemanın bir index (indis) numarası vardır. İlk elemanın index numarası 0'dır. İşte dizi elemanlarına dizi adı ve index numarası kullanılarak ulaşılır.Örneğin 10 elemanlı bir dizide ilk elemanın index numarası 0, son elemanın index numarası ise 9'dur.JavaScript'te dizi tanımlama ve dizinin elemanlarına değer atama işlemi şu şekildedir:var sinifim=new Array();sinifim[0]='Elin';sinifim[1]='Özge';Yukarıdaki örnekte var komutu ile sinifim adında boş bir dizi oluşturulmuştur. Ardından dizinin elemanlarına değer atanmıştır.Dizinin Tüm Elemanlarını Yazdırma Dizilerin olduğu yerde for döngüleri çok kullanılır. Çünkü bir dizinin tüm elemanları ile tek tek işlem yapmak gerektiğinde for döngüsü oldukça kullanışlıdır. var i,j; for(i=0;i<=9;i++){document.write(sayilar[i]+ ' ');}\nJavascript Matematik Fonksiyionları Random Metodu ile Rastgele Sayı Üretme \n Random metodu 0 ile 1 arasında bir sayı üretir. Doğal olarak bu sayı uzunca bir ondalık kısma sahiptir.var sayi = Math.random();Örneğin 0 ile 100 arasında bir tam sayı üretilmesini istiyorsak random metodunu 100 ile çarpıp yuvarlama metotlarından biri ile sayının ondalık kısmını atabiliriz:var sayi = Math.floor( Math.random() * 100 );Sayının Kuvvetini Alma - Pow Metodu\nDışarıdan iki değer alan bir metotdur. Birinci sayı taban, ikinci sayı kuvvet olacak şekilde çalışır.\nvar a = Math.pow (2,3);Sayının Karekökünü Alma - Sqrt Metodu \n Fonksiyon kendisine gönderilen sayının karekökünü geri döndürür.var a = Math.sqrt(9);Math.Min ve Math.Max Metotları \n Verilen sayılardan en büyük veya en küçüğünü bulmak için kullanılırlar.\ndocument.getElementById('sonuc1').innerHTML =Math.max(5, 0);// sonuç 5 \n document.getElementById('sonuc2').innerHTML = Math.min(98, 785); // sonuç 98",
        component:KonujsPage
       },
       {
        baslik4:'JS Tarih Ve Saat İşlemleri',
        jsicerik:"Date() Metodu\nDate metodu kullanılarak o anki tarih, saat ve saat dilimi gibi bilgiler elde edilebilir.\ndocument.getElementById('kutuTarih').innerHTML = Date();\nYukarıdaki komut çalıştığında sonuç şu şekilde olacaktır:\n Thu Dec 13 2018 18:08:16 GMT+0300 (GMT+03:00).Tarih Nesnesi – Date Object Oluşturma \n New komutuyla tarih sınıfından nesne oluşturabiliriz. Oluşturulan nesneye o anki veya farklı bir tarih saat bilgisini atayabiliriz.var zaman = new Date();\ndocument.getElementById('kutuTarih').innerHTML = zaman;Obje oluşturduktan sonra objeadi.day() hangi günde olduğumuzu ,objeadi.month() hangi ayda olduğumuz,objeadi.year() hangi yılda olduğumuz bilgisini ayrı ayrı çekebiliriz.1. Date yapıcı metodu içerisinde uygun formatta bir tarih ve saat belirtebiliriz:var zaman = new Date('October 29, 1923 20:30:00'); Ekran Çıktısı: Mon Oct 29 1923 20:30:00 GMT+0200 (Türkiye Standart Saati)",
        component:KonujsPage
       },  
       {
        baslik4:'JS Fonksiyonlar',
        jsicerik:"Fonksiyon Nedir? Program içerisinde bazı kod parçaları defalarca kullanılacaksa, bu satırları her seferinde tekrar yazmak yerine bir fonksiyon içerisine yazabilir ve fonksiyonun adı ile istedimiz yerden çağırabiliriz. Ayrıca JavaScript gibi olay yönlendirmeli dillerde hangi olay gerçekleştiğinde hangi fonksiyonun çalışacağı belirlenerek işlemler gerçekleştirilir. JavaScript'te Fonksiyon Tanımlama \n<script>function hesapla(){Yapılacak işlemler buraya yazılır.}</script>JavaScript'te Lokal ve Global Değişkenler \n Bir fonksiyon içerisinde tanımlanan değişken, sadece o fonksiyon içerisinde geçerli olur ve diğer yerlerden erişilemez. Fonksiyonların dışında, script etiketleri arasında tanımlanan bir değişken ise global değişkendir ve tüm diğer fonksiyonlardan çağrılabilir.Fonksiyonu çalıĢtırmak için; fonksyion_ismi() ; şeklinde yazarak istenilen yerde fonksiyon çalıştırılır.Fonksiyonlara Veri Gönderme-Alma \n Yazdığımız fonksiyonlara isteğimize göre değer verip iĢlenmiĢ verinin sonucunu geri alabiliriz. Böylelikle fonksiyonlarımız anlık olarak verileri iĢleyip sonucu programa dâhil edebilir. \n Fonksiyona parametre göndermek için yapmamız gereken fonksiyon isminden sonra parantez içerisine gelecek veri için değiĢken ismi yazmak olacaktır.Parametre alırken bu şekilde yaparız:function hesap(a,b){yapılacak işlemler}.Programda fonksiyon çağrılarak istenilen yerde çalıştırılır hesap(a,b) gibi.",
        component:KonujsPage
       },
       {
        baslik4:'JS Olaylar(Events)',
        jsicerik:"JavaScript'in en büyük amacı, sayfamızda bir olay gerçekleştiğinde istediğimiz işlemleri gerçekleştirebilmemizi sağlamaktır. Bunu sağlamak için sayfada gerçekleşebilecek olaylara birer isim verilmiştir. İstenilen olay karşısında bir javascript fonksiyonunu çağırıp, ilgili işlemleri yaptırabiliriz.Örneğin bir butona tıklandığında hesapla isimli javascript fonksiyonunu çalıştırmak istiyorsak buton elementinin içine onclick parametresi şu şekilde yazılır: <input type='button' value='Hesapla' onclick='hesapla()' />onClick:Elemana tıklanması olayıdır.onDblClick:Elemana çift tıklanması olayıdır.onLoad:Elemanın yüklenmesi olayıdır. Bu sayfanın kendisi olabileceği gibi bir resim ya da frame de olabilir. onUnLoad:Tarayıcıda açık haldeki sayfanın terkedilmesi olayıdır. Bu pencerenin kapatılmasıyla olabileceği gibi bir linke tıklayarak başka bir sayfaya geçilmesi de olabilir.onFocus:Bir elemanın seçilerek odaklanılması olayıdır. Örneğin bir metin kutusuna tıklandığında kontrol o kutuya geçer ve kutu aktif olur. onBlur:Aktif haldeki elemanın terk edilmesi olayıdır.onMouseOver:Fare ile elemanın üzerine gelinmesi olayıdır.onMouseOut:Fare imlecinin elemanın üzerinden çekilmesi olayıdır.onMouseMove:Fare imlecinin, eleman üzerinde hareket ettirilmesi olayıdır.onMouseDown:Fare sol tuşunun eleman üzerindeyken basılması olayıdır. Tuş aşağıya indiği anda ilgili fonksiyon çalışır.onMouseUp:Fare sol tuşunun eleman üzerindeyken basılıp bırakılması olayıdır. onKeyDown:Klavyeden bir tuşa basılması olayıdır. Basılan tuşun ASCII kodu Event.keyCode özelliği ile öğrenilebilir. String.fromCharCode metodu ise okunan karakter kodunu tuşun ismine çevirebilir.onSelect:Bir metin kutusu içindeki metnin seçilmesi olayıdır,onResize:Tarayıcı penceresinin boyutunun değiştirilmesi olayıdır.",
        component:KonujsPage
       },
       {
        baslik4:'JS Document Nesnesi',
        jsicerik:"JavaScript ile web sayfamızdaki etiketlerin ve form elemanlarının içeriklerine-değerlerine ulaşmak, bunlarla işlem yapmak ve değiştirmek isteyebiliriz.Özellikle form elemanlarına ziyaretçiler tarafından girilen bilgilere ulaşmaya sıkça ihtiyaç duyarız.JavaScript'te çeşitli metotlar kullanarak html etiketlerinin içerik ve özelliklerine ulaşabilir ve istersek bu özellikleri değiştirebiliriz.getElementById Metodu:Web sayfasındaki html etiketlerine ulaşmak için en çok kullanılan metotlardan biridir. Ulaşılmak istenen html nesnesinin id'si belirtilerek, ilgili elemana ulaşmamızı sağlar.Örneğin k1 isimli metin kutusunun içindeki değere şu şekilde ulaşabiliriz: var sayi = document.getElementById('k1').value;innerHTML Özelliği:Body kısmında yer alan bir html etiketinin içeriğini değiştirmemizi sağlar. document.getElementById('sonuc').innerHTML = 'Teşekkürler. Mesajınız Alındı.'; getElementsByClassName Metodu:Id özelliği her etiket için farklı olması gereken bir özelliktir. Bu durumda getElementById metodu ile aynı anda birden fazla elemana ulaşmamız mümkün değildir.Class özelliği ise sayfada bir çok etikete uygulanmış olabilir. Sayfada aynı class'ın uygulandığı tüm elemanlar ile işlem yapmak istersek getElementsByClassName metodunu kullanabiliriz.getElementsByName Metodu:Şayet id'ye göre değil de name özelliğine göre bir html nesnesine ulaşmak istersek getElementsByName metodunu kullanabiliriz. Kullanımı bir üstte anlatılan getElementsByClassName metoduna benzer. Ulaşılmak istenilen elemanın index numarasının da belirtilmesi gerekir.Örnek:var a = document.getElementsByName('kutu')[0].value;Bu örnekte name özelliği 'kutu' olan ilk html elemanına ulaşılacaktır.Write Metodu:Sayfaya metin ya da Html kodlarını sayfaya yazdırmamızı sağlar.document.write('Hoş geldiniz, Sayın <b>Aslı</b>');",
        component:KonujsPage
       },
       {
        baslik4:'JavaScript String Metotları',
        jsicerik:"Length Özelliği – Metnin Uzunluğunu Alma:String değişken ve ifadelerin kaç karakter uzunlukta olduğunu verir.var isim = “Fatma Seher”;var a = isim.length;indexOf Metodu - Metin İçinde Arama Yapma:Bir string içerisinde başka bir ifadeyi arayarak, o ifade var ise başladığı karakterin numarasını verir. İlk karakterin numarasının 0 olduğu unutulmamalıdır. Eğer aranan ifade bulunamazsa -1 değeri verir.var isim = “Eda Yıldız”;var a = isim.indexOf(“d”); .A bir değerini geri döndürür.lastIndexOf Metodu - Metin İçinde Arama Yapma:indexOf metodundan farkı aranan ifade birden çok geçiyorsa son eşleşme için sonuç döndürmesidir.Slice Metodu – Metnin Parçasını Alma:Başlangıç ve bitiş index numaraları verilerek bir string içerisinden parça almaya yarar.var isim = “telefon, tablet, bilgisayar”;var a = isim.slice( 9 , 15 );Bitiş index numarasındaki karakter sonuca dahil edilmez.Bu örnekte a değişkeninin değeri “tablet” olacaktır. Boşluklar, virgül, nokta gibi her türlü ifadenin bir karakter olduğunu unutmayınız.Replace Metodu – Metin Bulma ve Değiştirme:Bir ifade arayıp, o ifadeyi başka bir metin ile değiştirmeye yarar.var metin  = “telefon, tablet, bilgisayar”;var yeniMetin = metin. replace( “tablet”, “notebook” );document.getElementById('sonuc').innerHTML = yeniMetin; Split Metodu – Metni Diziye Çevirme:Split metodu ile istenilen metin diziye çevrilebilir. Kullanılan parametre ile metnin nasıl parçalanacağı belirtilir.Metnin her karakterini ayrı ayrı alarak diziye dönüştürmek için:var metin  = “JavaScript Dersleri”;var dizi = metin.split( “” );Metni boşluk karakterlerinden ayırarak diziye dönüştürmek için:var metin  = “JavaScript Dersleri”;var dizi = metin.split( “ ” );",
        component:KonujsPage
       },
       {
        baslik4:'JS Windows Nesnesi',
        jsicerik:"Tarayıcı penceresi ile ilgili işlemleri window nesnesini kullanarak yapabiliriz.Çok kullanılan bazı metotlar şunlardır:Alert Metodu:\nBir mesaj kutusu ile kullanıcıya mesaj vermek için kullanılır.alert('Hoş geldiniz.'); Confirm Metodu:Kullanıcıdan bir işlem için onay almayı sağlar. Açılan pencerede kullanıcıya bir mesaj verilir. Kullanıcı ise Tamam ya da İptal düğmelerinden birine tıklar.Tamam düğmesine tıklandığında metot true değeri döndürürken, İptal düğmesine tıklandığında false değeri geri döner. Sonuç kontrol edilerek istenen işlemler yapılabilir.var karar=confirm('Sayfadan ayrılmak istiyor musunuz?');Close Metodu:O anki tarayıcı penceresini kapatır.Örnek;window.close();Open Metoduİstenen boyut ve özelliklerde bir tarayıcı penceresi açılmasını sağlar. Metot çağrılırken üç bilgi verilebilir.window.open('sayfa adresi', 'pencere adı', 'pencere özellikleri'); ",
        component:KonujsPage
       },
       {
        baslik4:'JavaScript Timer Sınıfı ',
        jsicerik:"JavaScript fonksiyonlarının belirlenen bir süre sonunda ya da belli aralıklarla tekrar ederek çalışmasını sağlayabiliriz.setTimeout metodu istediğimiz fonksiyonun, belirtilen süre kadar sonra çalıştırılması, setInterval metodu ise istediğimiz fonksiyonun belirlenen aralıklarla sürekli olarak tekrar etmesini sağlar.setTimeout Metodu:window.setTimeout( çalıştırılacakFonksiyonAdı, milisaniye) Milisaniye cinsinden belirtilen süre kadar bekleyip, bu süre dolduğunda belirtilen fonksiyonu çalıştırır. Bu sayfada anlatılan tüm metotlar window sınıfına ait olup, metot isimlerinden önce Window sınıfı yazılmasa da olur.<script>setTimeout(aaa,3000);function aaa() {document.getElementById('sonuc').innerHTML='Süre doldu.';}</script>setTimeout metodu çalıştırılıp geri sayım başladıktan sonra bu metodun çalışmasını engellemek istersek clearTimeout metodunu kullanabiliriz.window.clearTimeout(degiskenAdi);setInterval() Methodu  Kullanımı setTimeout metodu gibidir. Yaptığı iş ise belirtilen fonksiyonu belirtilen süre kadar aralık ile sürekli çalıştırır. window.setInterval(fonksiyonAdi, milisaniye);",
        component:KonujsPage
       }
    ]

  }
  jskonu(sayfa3){
    this.navCtrl.push(KonujsPage,{
    data3:sayfa3})
   
  }

}
